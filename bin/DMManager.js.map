{"version":3,"sources":["DMManager.ts"],"names":[],"mappings":"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","file":"DMManager.js","sourcesContent":["import { Message, Guild, User, TextChannel, DMChannel, Collection, MessageEmbed } from 'discord.js';\nimport { Client, Plugin, IPlugin, PluginConstructor, SharedProviderStorage } from '@yamdbf/core';\nimport { normalize } from './Util';\nimport { dmManagerFactory } from './dmManagerFactory';\nimport { DMManagerUsageError } from './DMManagerUsageError';\n\nexport class DMManager extends Plugin implements IPlugin\n{\n\tpublic static readonly default: (guild: string, defaultChannel: string) => PluginConstructor = dmManagerFactory;\n\tpublic static readonly dmManager: (guild: string, defaultChannel: string) => PluginConstructor = dmManagerFactory;\n\tpublic static readonly DMManager: PluginConstructor = DMManager;\n\n\tpublic readonly name: string = 'DMManager';\n\n\tprivate readonly _client: Client;\n\tprivate readonly _guildID: string;\n\tprivate readonly _defaultChannelID: string;\n\tprivate _categoryID: string;\n\tprivate _storage: SharedProviderStorage;\n\tprivate _guild: Guild;\n\tprivate _channels: Collection<string, TextChannel>;\n\n\tpublic constructor(client: Client, guild: string = '', defaultChannel: string = '', category?: string)\n\t{\n\t\tsuper();\n\t\tthis._client = client;\n\n\t\tif (!guild || !defaultChannel)\n\t\t\tthrow new DMManagerUsageError(\n\t\t\t\t'Import \"dmManager\" and pass to plugins with a guild ID and default channel ID');\n\n\t\tif (!this._client.guilds.has(guild))\n\t\t\tthrow new Error(`DMManager: Failed to find guild with ID '${guild}'`);\n\n\t\tif (!this._client.guilds.get(guild).channels.has(defaultChannel))\n\t\t\tthrow new Error(\n\t\t\t\t`DMManager: Failed to find a default channel in guild '${guild}' with ID '${defaultChannel}`);\n\n\t\tthis._guildID = guild;\n\t\tthis._defaultChannelID = defaultChannel;\n\t}\n\n\tpublic async init(storage: SharedProviderStorage): Promise<void>\n\t{\n\t\tthis._storage = storage;\n\t\tthis._guild = this._client.guilds.get(this._guildID);\n\t\tif (await this._storage.exists('guild')\n\t\t\t&& await this._storage.get('guild') !== this._guildID)\n\t\t\t\tawait this.clearOpenChannels();\n\n\t\tawait this._storage.set('guild', this._guildID);\n\n\t\tif (!this._guild.member(this._client.user).permissions.has(['MANAGE_CHANNELS', 'MANAGE_MESSAGES']))\n\t\t\tthrow new Error('DMManager: Bot must have MANAGE_CHANNELS, MANAGE_MESSAGES permissions in the supplied guild');\n\n\t\tthis._channels = new Collection(\n\t\t\t(await this._storage.get('openChannels') || []).map((c: [string, string]) =>\n\t\t\t\t[c[0], this._guild.channels.get(c[1])]) || []);\n\n\t\tthis._client.on('message', (message: Message) => this.handleMessage(message));\n\t\tthis._client.on('channelDelete', (channel: TextChannel) =>\n\t\t{\n\t\t\tif (this._channels.find(c => c.id === channel.id))\n\t\t\t{\n\t\t\t\tthis._channels.delete(this._channels.findKey(c => c.id === channel.id));\n\t\t\t\tthis.storeOpenChannels();\n\t\t\t}\n\t\t});\n\n\t\tthis._client.on('blacklistAdd', (user, global) => { if (global) this.blacklist(user); });\n\t\tthis._client.on('blacklistRemove', (user, global) => { if (global) this.whitelist(user); });\n\t}\n\n\t/**\n\t * Add a user to the DMManager blacklist\n\t */\n\tpublic async blacklist(user: User): Promise<void>\n\t{\n\t\tawait this._storage.set(`blacklist.${user.id}`, true);\n\t}\n\n\t/**\n\t * Remove a user from the DMManager blacklist\n\t */\n\tpublic async whitelist(user: User): Promise<void>\n\t{\n\t\tawait this._storage.remove(`blacklist.${user.id}`);\n\t}\n\n\t/**\n\t * Return whether or not a user is blacklisted from the DMManager\n\t */\n\tprivate async isBlacklisted(user: User): Promise<boolean>\n\t{\n\t\treturn await this._storage.exists(`blacklist.${user.id}`);\n\t}\n\n\t/**\n\t * Update open managed channels in storage\n\t */\n\tprivate async storeOpenChannels(): Promise<void>\n\t{\n\t\tawait this._storage.set('openChannels',\n\t\t\tArray.from(this._channels.entries())\n\t\t\t\t.map((c: [string, TextChannel]) => [c[0], c[1].id]));\n\t}\n\n\t/**\n\t * Remove any open channels from storage\n\t */\n\tprivate async clearOpenChannels(): Promise<void>\n\t{\n\t\tawait this._storage.set('openChannels', []);\n\t\tthis._channels.clear();\n\t}\n\n\t/**\n\t * Create a new managed channel for the user in the dm manager\n\t * guild and add it to the channels cache and stored openChannels\n\t */\n\tprivate async createNewChannel(user: User): Promise<TextChannel>\n\t{\n\t\tlet newChannel: TextChannel;\n\t\ttry\n\t\t{\n\t\t\tnewChannel = <TextChannel> await this._guild.channels\n\t\t\t\t.create(`${normalize(user.username) || 'unicode'}-${user.discriminator}`, { type: 'text', parent: this._categoryID });\n\t\t\tthis._channels.set(user.id, newChannel);\n\t\t\tthis.storeOpenChannels();\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\tthis.sendError(`DMManager: Failed to create channel: '${normalize(user.username)}-${user.discriminator}'\\n${err}`);\n\t\t}\n\n\t\tif (newChannel) await newChannel.send({ embed: this.buildUserInfo(user) });\n\t\treturn newChannel;\n\t}\n\n\t/**\n\t * Create an embed for user info used at the start\n\t * of a new managed channel\n\t */\n\tprivate buildUserInfo(user: User): MessageEmbed\n\t{\n\t\treturn new MessageEmbed()\n\t\t\t.setColor(8450847)\n\t\t\t.setAuthor(`${user.username}#${user.discriminator} (${user.id})`, user.avatarURL())\n\t\t\t.setFooter('DM channel started')\n\t\t\t.setTimestamp();\n\t}\n\n\t/**\n\t * Handle incoming messages. If it's a DM, find the channel\n\t * belonging to the user. If it doesn't exist, create one\n\t */\n\tprivate async handleMessage(message: Message): Promise<void>\n\t{\n\t\tif (await this.isBlacklisted(message.author)) return;\n\t\tif (message.embeds[0] && message.channel.type !== 'dm') return;\n\t\tif (message.channel.type !== 'dm' && message.guild.id !== this._guildID) return;\n\t\tif (message.guild && message.channel.id === message.guild.id) return;\n\t\tif (message.author.id !== this._client.user.id\n\t\t\t&& !this._channels.has(message.author.id) && !message.guild)\n\t\t\tawait this.createNewChannel(message.author);\n\n\t\tif (message.channel.type === 'dm')\n\t\t{\n\t\t\tconst channelID: string = message.author.id === this._client.user.id ?\n\t\t\t\t(<DMChannel> message.channel).recipient.id : message.author.id;\n\t\t\tconst channel: TextChannel = this._channels.get(channelID);\n\t\t\tif (!channel) return;\n\t\t\tif (message.embeds[0]) message.content += '\\n\\n**[MessageEmbed]**';\n\t\t\tif (message.attachments.size > 0) message.content += `\\n\\n**Attachments**:\\n${message.attachments.array().map(x => x.url).join('\\n')}`;\n\t\t\tawait this.send(channel, message.author, message.content)\n\t\t\t\t.catch(err => this.sendError(`Failed to send message in #${this._channels.get(channelID).name}\\n${err}`));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmessage.delete();\n\t\t\tconst user: User = await this.fetchUser(<TextChannel> message.channel);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tawait user.send(message.content);\n\t\t\t}\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t\tmessage.channel.send(new MessageEmbed()\n\t\t\t\t\t.setColor('#FF0000')\n\t\t\t\t\t.setTitle('There was an error while sending the message')\n\t\t\t\t\t.setDescription(err));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fetch the user object the managed channel represents contact with\n\t */\n\tprivate async fetchUser(channel: TextChannel): Promise<User>\n\t{\n\t\tconst id: string = this._channels.findKey(c => c.id === channel.id);\n\t\treturn await this._client.users.fetch(id);\n\t}\n\n\t/**\n\t * Send a text message to a managed channel as an embed, spoofing\n\t * the provided user to simulate messages from that user\n\t */\n\tprivate async send(channel: TextChannel, user: User, message: string): Promise<Message>\n\t{\n\t\treturn <Message> await channel.send({\n\t\t\tembed: new MessageEmbed()\n\t\t\t\t.setColor(8450847)\n\t\t\t\t.setAuthor(`${user.username}#${user.discriminator}`, user.avatarURL())\n\t\t\t\t.setDescription(message)\n\t\t\t\t.setTimestamp()\n\t\t});\n\t}\n\n\t/**\n\t * Send an error to the default channel of the DMManager guild\n\t */\n\tprivate async sendError(message: string): Promise<Message>\n\t{\n\t\treturn <Message> await (<TextChannel> this._guild.channels.get(this._defaultChannelID))\n\t\t\t.send({\n\t\t\t\tembed: new MessageEmbed()\n\t\t\t\t\t.setColor('#FF0000')\n\t\t\t\t\t.setTitle('DMManager error')\n\t\t\t\t\t.setDescription(message)\n\t\t\t\t\t.setTimestamp()\n\t\t\t});\n\t}\n}\n"],"sourceRoot":"../src"}